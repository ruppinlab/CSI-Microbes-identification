from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

##### load config and sample sheets #####
configfile: "config/PathSeq-config.yaml"


# patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")
lanes = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample", "lane"], drop=False)
lanes.index = lanes.index.set_levels([i.astype(str) for i in lanes.index.levels])  # enforce str in index
samples = lanes[["sample", "patient"]].drop_duplicates()

cells = pd.read_csv(config["units"], sep="\t").set_index(["sample", "barcode", "patient"], drop=False)

wildcard_constraints:
    patient="P1",
    sample="|".join(lanes["sample"].unique()),
    lane="|".join(lanes["lane"].unique())

# Snakemake includes
include: "../RNA-snakemake-rules/rules/cellranger.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-10x.smk"

# Directories
FASTQ_DIR = "FASTQ"
PATIENT_FASTQ_DIR = join("FASTQ", "raw", "{patient}")
CR_SAMPLE_ODIR = "{patient}-{sample}"

# STAR Input Files
SRA_FASTQ1_FILE = join(FASTQ_DIR, "{run}_1.fastq")
SRA_FASTQ2_FILE = join(FASTQ_DIR, "{run}_2.fastq")

# CellRanger Files
CB_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{lane}_R1_001.fastq.gz")
cDNA_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{lane}_R2_001.fastq.gz")
CR_BAM_FILE = join(CR_SAMPLE_ODIR, "outs", "possorted_genome_bam.bam")

CB_SAMPLE_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_R1_001.fastq.gz")
cDNA_SAMPLE_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_R2_001.fastq.gz")

# PathSeq files
PATHSEQ_BAM = join("output", "PathSeq", "{patient}-{sample}", "pathseq.bam")
PATHSEQ_CELL_SCORE = join("output", "PathSeq", "{patient}-{sample}-{cell}", "pathseq.txt")

localrules: clean_kraken_output, concatenate_fq_gz_files

rule all:
    input:
        #expand("output/SAHMI/{patient}/r1/{sample}.fa", patient="P1", sample=["SCAF2961_1_Uninfected", "SCAF2963_3_Live"]), 
        #expand("output/SAHMI/{patient}/r2/{sample}.fa", patient="P1", sample=["SCAF2961_1_Uninfected", "SCAF2963_3_Live"]),
        #expand("output/SAHMI/{patient}/{sample}.microbiome.output.txt", patient="P1", sample=["SCAF2961_1_Uninfected", "SCAF2963_3_Live"]),
        expand("output/INVADEseq_raw/{patient}-{sample}.gex.filtered_matrix.genus.csv", patient="P1", sample=["SCAF2961_1_Uninfected", "SCAF2962_2_HK", "SCAF2963_3_Live", "SCAF2965_5_Live"]),
        # expand("output/SAHMI/{patient}/{sample}.sckmer.txt", patient="P1", sample=["SCAF2961_1_Uninfected", "SCAF2963_3_Live"]),
        # expand(SRA_FASTQ1_FILE, Run=["SRR24488149", "SRR24488150"]),
        # expand(cDNA_FASTQ_FILE, patient="P1", sample="SCAF2961_1_Uninfected", lane=["S1_L001", "S1_L002"]),
        # expand(SRA_FASTQ3_FILE, run=["SRR15653095", "SRR15653115", "SRR15652839"]),
        # expand(CR_BAM_FILE, zip, patient="P1", sample="SCAF2961_1_Uninfected"),
        # expand(PATHSEQ_CELL_SCORE, zip, patient=cells["patient"], sample=cells["sample"], cell=cells["barcode"])
        # expand(SRPRISM_TAG_BAM, zip, patient=samples["patient"], sample=samples["sample"], genome=samples["genome"])


rule run_invade_seq:
    conda:
        "../envs/pysam-env.yaml"
    input:
        CR_bam=CR_BAM_FILE,
        barcodes="{patient}-{sample}/outs/raw_feature_bc_matrix/barcodes.tsv.gz",
        pathseq_bam=PATHSEQ_FILTERED_BAM,
        pathseq_scores=join("output", "PathSeq", "{patient}-{sample}", "pathseq.txt")
    output:
        read_name_pathseq="output/INVADEseq_raw/{patient}-{sample}.gex.filtered_matrix.readname",
        unmap_cbub_bam_file = "output/INVADEseq_raw/{patient}-{sample}.gex.filtered_matrix.unmap_cbub.bam",
        unmap_cbub_fasta_file = "output/INVADEseq_raw/{patient}-{sample}.gex.filtered_matrix.unmap_cbub.fasta",
        out_cell_list = "output/INVADEseq_raw/{patient}-{sample}.gex.filtered_matrix.unmap_cbub.list",
        out_readname_cell_path = "output/INVADEseq_raw/{patient}-{sample}.gex.raw.filtered_matrix.readnamepath",
        out_genus_file = "output/INVADEseq_raw/{patient}-{sample}.gex.filtered_matrix.genus.cell",
        output_UMI_table_csv = "output/INVADEseq_raw/{patient}-{sample}.gex.filtered_matrix.genus.csv",
        output_UMI_validate_table_csv  = "output/INVADEseq_raw/{patient}-{sample}.gex.filtered_matrix.validate.cell"
    shell:
        "python ../../Galeano-Nino-Bullman-Intratumoral-Microbiota_2022/patient_samples/INVADEseq.py "
        "{input.CR_bam} {wildcards.patient}-{wildcards.sample} {input.barcodes} {input.pathseq_bam} {input.pathseq_scores} "
        "{output.read_name_pathseq} {output.unmap_cbub_bam_file} {output.unmap_cbub_fasta_file} {output.out_cell_list} {output.out_readname_cell_path} {output.out_genus_file} {output.output_UMI_table_csv} {output.output_UMI_validate_table_csv}"

### rules to download FASTQ files ###

rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    conda:
        "../envs/sratoolkit-env.yaml"
    params:
        FASTQ_DIR
    output:
        SRA_FASTQ1_FILE,
        SRA_FASTQ2_FILE
    shell:
        "prefetch {wildcards.run} \n"
        "fasterq-dump --mem 16000M -O {params} -t temp/ --include-technical --split-files {wildcards.run} \n"

def get_sra_fq_files(wildcards):
    run_of_interest = lanes.loc[(lanes["patient"] == wildcards.patient) & (lanes["sample"] ==  wildcards.sample) & (lanes["lane"] ==  wildcards.lane), "Run"]
    return {
        "CellBarcode_fq": expand(SRA_FASTQ1_FILE, run=run_of_interest),
        "cDNA_fq": expand(SRA_FASTQ2_FILE, run=run_of_interest),
    }

# compress and rename
rule compress_rename_SRA_FASTQ_files:
    group:
        "FASTQ"
    input:
        unpack(get_sra_fq_files)
    output:
        CellBarcode_fq = CB_FASTQ_FILE,
        cDNA_fq = cDNA_FASTQ_FILE,
    shell:
        "ml pigz/2.7-GCCcore-11.3.0 && "
        "pigz -p 4 -c {input.CellBarcode_fq} > {output.CellBarcode_fq} && "
        "pigz -p 4 -c {input.cDNA_fq} > {output.cDNA_fq}"

def get_sra_fq_files_by_sample(wildcards):
    runs_of_interest = lanes.loc[(lanes["patient"] == wildcards.patient) & (lanes["sample"] ==  wildcards.sample), "Run"]
    return {
        "CellBarcode_fq": expand(SRA_FASTQ1_FILE, run=runs_of_interest),
        "cDNA_fq": expand(SRA_FASTQ2_FILE, run=runs_of_interest),
    }

rule concatenate_fq_gz_files:
    input:
        unpack(get_sra_fq_files_by_sample)
    output:
        CellBarcode_fq = CB_SAMPLE_FASTQ_FILE,
        cDNA_fq = cDNA_SAMPLE_FASTQ_FILE, 
    shell:
        "cat {input.CellBarcode_fq} > {output.CellBarcode_fq} && "
        "cat {input.cDNA_fq} > {output.cDNA_fq}"

rule run_kraken:
    singularity:
        "library://wir963/csi-microbes/kraken2" 
    params:
        "output/kraken2/{patient}/{sample}#.fq"
    input:
        CB_SAMPLE_FASTQ_FILE,
        cDNA_SAMPLE_FASTQ_FILE 
    output:
        fq1="output/kraken2/{patient}/{sample}_1.fq",
        fq2="output/kraken2/{patient}/{sample}_2.fq",
        output="output/kraken2/{patient}/{sample}.kraken.output.txt",
        report="output/kraken2/{patient}/{sample}.kraken.report.txt"
    shell:
        "export OMP_NUM_THREADS=16 && "
        "kraken2 --db microbev1 "
        "--paired "
        "--threads 16 "
        "--use-names "
        "--report-minimizer-data "
        "--classified-out {params} "
        "--output {output.output} "
        "--report {output.report} "
        "{input} "
        # "/nemo/project/proj-tracerx-lung/tctProjects/robinsw/SAHMI/functions/run_kraken.r "


rule clean_kraken_output:
    input:
        "output/kraken2/{patient}/{sample}.kraken.report.txt"
    output:
        std="output/kraken2/{patient}/{sample}.kraken.report.std.txt",
        mpa="output/kraken2/{patient}/{sample}.kraken.report.mpa.txt"
    shell:
        "cut -f1-3,6-8 {input} > {output.std} && "
        "../../SAHMI/functions/kreport2mpa.py -r {output.std} -o {output.mpa} --intermediate-ranks"


rule extract_microbiome_reads_fq1:
    conda:
        "../envs/SAHMI-env.yaml"
    params:
        "output/SAHMI/{patient}/r1/"
    input:
        fq="output/kraken2/{patient}/{sample}_1.fq",
        rep="output/kraken2/{patient}/{sample}.kraken.report.txt",
        mpa="output/kraken2/{patient}/{sample}.kraken.report.mpa.txt",
    output:
        "output/SAHMI/{patient}/r1/{sample}.fa"
    shell:
        "Rscript ../../SAHMI/functions/extract_microbiome_reads.r --sample_name {wildcards.sample} "
        "--fq {input.fq} --kraken_report {input.rep} --mpa_report {input.mpa} --out_path {params}"


rule extract_microbiome_reads_fq2:
    conda:
        "../envs/SAHMI-env.yaml"
    params:
        "output/SAHMI/{patient}/r2/"
    input:
        fq="output/kraken2/{patient}/{sample}_2.fq",
        rep="output/kraken2/{patient}/{sample}.kraken.report.txt",
        mpa="output/kraken2/{patient}/{sample}.kraken.report.mpa.txt",
    output:
        "output/SAHMI/{patient}/r2/{sample}.fa"
    shell:
        "Rscript ../../SAHMI/functions/extract_microbiome_reads.r --sample_name {wildcards.sample} "
        "--fq {input.fq} --kraken_report {input.rep} --mpa_report {input.mpa} --out_path {params}"


rule extract_microbiome_output:
    conda:
        "../envs/SAHMI-env.yaml"
    params:
        "output/SAHMI/{patient}/"
    input:
        out="output/kraken2/{patient}/{sample}.kraken.output.txt",
        rep="output/kraken2/{patient}/{sample}.kraken.report.txt",
        mpa="output/kraken2/{patient}/{sample}.kraken.report.mpa.txt",
    output:
        "output/SAHMI/{patient}/{sample}.microbiome.output.txt"
    shell:
        "Rscript ../../SAHMI/functions/extract_microbiome_output.r --sample_name {wildcards.sample} "
        "--output_file {input.out} --kraken_report {input.rep} --mpa_report {input.mpa} --out_path {params}"

# need to run sckmer paired and fa1 must be the read containing the cell barcodes; annoying this isn't specified in the documentation
rule sckmer_paired_3p_v3:
    conda:
        "../envs/SAHMI-env.yaml"
    wildcard_constraints:
        sample="SCAF2961_1_Uninfected|SCAF2962_2_HK|SCAF2963_3_Live"
    params:
        "output/SAHMI/{patient}/"
    input:
        fa1="output/SAHMI/{patient}/r1/{sample}.fa",
        fa2="output/SAHMI/{patient}/r2/{sample}.fa",
        micro="output/SAHMI/{patient}/{sample}.microbiome.output.txt",
        rep="output/kraken2/{patient}/{sample}.kraken.report.txt",
        mpa="output/kraken2/{patient}/{sample}.kraken.report.mpa.txt",
    output:
        "output/SAHMI/{patient}/{sample}.sckmer.txt"
    shell:
        "Rscript ../../SAHMI/functions/sckmer.r --sample_name {wildcards.sample} --fa1 {input.fa1} --fa2 {input.fa2} --microbiome_output_file {input.micro} "
        "--kraken_report {input.rep} --mpa_report {input.mpa} --out_path {params} --cb_len 16 --umi_len 12 "

rule sckmer_paired_5p:
    conda:
        "../envs/SAHMI-env.yaml"
    wildcard_constraints:
        sample="SCAF2965_5_Live"
    params:
        "output/SAHMI/{patient}/"
    input:
        fa1="output/SAHMI/{patient}/r1/{sample}.fa",
        fa2="output/SAHMI/{patient}/r2/{sample}.fa",
        micro="output/SAHMI/{patient}/{sample}.microbiome.output.txt",
        rep="output/kraken2/{patient}/{sample}.kraken.report.txt",
        mpa="output/kraken2/{patient}/{sample}.kraken.report.mpa.txt",
    output:
        "output/SAHMI/{patient}/{sample}.sckmer.txt"
    shell:
        "Rscript ../../SAHMI/functions/sckmer.r --sample_name {wildcards.sample} --fa1 {input.fa1} --fa2 {input.fa2} --microbiome_output_file {input.micro} "
        "--kraken_report {input.rep} --mpa_report {input.mpa} --out_path {params} --cb_len 16 --umi_len 10 "

rule barcode_denoising:
    conda:
        "../envs/SAHMI-env.yaml"
    input:
        kmer="output/SAHMI/{patient}/{sample}.sckmer.txt",
        report="output/kraken2/{patient}/{sample}.kraken.report.txt"
    output:
        hits="output/SAHMI/{patient}/{sample}.barcode.kmer.hits.tsv",
        rpmm="output/SAHMI/{patient}/{sample}.kraken.report.rpmm.tsv"
    script:
        "src/barcode_denoising.R" 

rule cell_line_quantile_test:
    input:
        kmer="output/SAHMI/{patient}/{sample}.barcode.kmer.hits.tsv",
        rpmm="output/SAHMI/{patient}/{sample}.kraken.report.rpmm.tsv",
        cell_line="../../SAHMI/Table S4.xlsx"
    output:
        hits="output/SAHMI/{patient}/{sample}.cell_line_quantile_hits.tsv",
        taxa="output/SAHMI/{patient}/{sample}.cell_line_quantile_hits_taxa.tsv"
    script:
        "src/cell_line_quantile_test.py"

rule taxa_counts_3p_v3:
    conda:
        "../envs/SAHMI-env.yaml"
    wildcard_constraints:
        sample="SCAF2961_1_Uninfected|SCAF2962_2_HK|SCAF2963_3_Live"
    input:
        fa1="output/SAHMI/{patient}/r1/{sample}.fa",
        fa2="output/SAHMI/{patient}/r2/{sample}.fa",
        taxa="output/SAHMI/{patient}/{sample}.cell_line_quantile_hits_taxa.tsv",
        rep="output/kraken2/{patient}/{sample}.kraken.report.txt",
        mpa="output/kraken2/{patient}/{sample}.kraken.report.mpa.txt",
    params:
        "output/SAHMI/{patient}/"
    output:
        "output/SAHMI/{patient}/{sample}.counts.txt"
    shell:
        "Rscript ../../SAHMI/functions/taxa_counts.r --sample_name {wildcards.sample} --fa1 {input.fa1} --fa2 {input.fa2} "
        "--taxa {input.taxa} --kraken_report {input.rep} --mpa_report {input.mpa} --out_path {params} --cb_len 16 --umi_len 12 "

rule taxa_counts_5p:
    conda:
        "../envs/SAHMI-env.yaml"
    wildcard_constraints:
        sample="SCAF2965_5_Live"
    input:
        fa1="output/SAHMI/{patient}/r1/{sample}.fa",
        fa2="output/SAHMI/{patient}/r2/{sample}.fa",
        taxa="output/SAHMI/{patient}/{sample}.cell_line_quantile_hits_taxa.tsv",
        rep="output/kraken2/{patient}/{sample}.kraken.report.txt",
        mpa="output/kraken2/{patient}/{sample}.kraken.report.mpa.txt",
    params:
        "output/SAHMI/{patient}/"
    output:
        "output/SAHMI/{patient}/{sample}.counts.txt"
    shell:
        "Rscript ../../SAHMI/functions/taxa_counts.r --sample_name {wildcards.sample} --fa1 {input.fa1} --fa2 {input.fa2} "
        "--taxa {input.taxa} --kraken_report {input.rep} --mpa_report {input.mpa} --out_path {params} --cb_len 16 --umi_len 10 "




