from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

##### load config and sample sheets #####
configfile: "config/PathSeq-config.yaml"


lanes = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample", "lane"], drop=False)
# lanes = lanes.loc[~lanes["R1_path"].isin(["/data/Robinson-SB/Bukavina2022/10xfiles/37249_S12_L004_R1_001.fastq.gz", "/data/Robinson-SB/Bukavina2022/10xfiles/37249_S12_L003_R1_001.fastq.gz", "/data/Robinson-SB/Bukavina2022/10xfiles/37249_S12_L001_R1_001.fastq.gz", "/data/Robinson-SB/Bukavina2022/10xfiles/37236_S11_L004_R1_001.fastq.gz", "/data/Robinson-SB/Bukavina2022/10xfiles/37236_S11_L003_R1_001.fastq.gz"])]
lanes = lanes.loc[~lanes["sample"].isin(["37249","37236"])]

lanes.index = lanes.index.set_levels([i.astype(str) for i in lanes.index.levels])  # enforce str in index
samples = lanes[["sample", "patient"]].drop_duplicates()

wildcard_constraints:
    patient="|".join(samples["patient"].unique()),
    sample="|".join(lanes["sample"].unique()),
    lane="|".join(lanes["lane"].unique())

# Snakemake includes
include: "../RNA-snakemake-rules/rules/cellranger.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-10x.smk"

# Directories
FASTQ_DIR = "FASTQ"
PATIENT_FASTQ_DIR = join("FASTQ", "raw", "{patient}")
CR_SAMPLE_ODIR = "{patient}-{sample}"

# CellRanger Files
CB_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{lane}_R1_001.fastq.gz")
cDNA_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{lane}_R2_001.fastq.gz")
CR_BAM_FILE = join(CR_SAMPLE_ODIR, "outs", "possorted_genome_bam.bam")

# PathSeq files
PATHSEQ_BAM = join("output", "PathSeq", "{patient}-{sample}", "pathseq.bam")
PATHSEQ_CELL_SCORE = join("output", "PathSeq", "{patient}-{sample}-{cell}", "pathseq.txt")

rule all:
    input:
        expand(PATHSEQ_BAM, zip, patient=samples["patient"], sample=samples["sample"]),

### rules to download FASTQ files ###

def get_fq_files(wildcards):
    lane = lanes.loc[(lanes["patient"] == wildcards.patient) & (lanes["sample"] ==  wildcards.sample) & (lanes["lane"] ==  wildcards.lane)]
    return {
        "CellBarcode_fq": lane["R1_path"],
        "cDNA_fq": lane["R2_path"],
    }

# compress and rename
rule rename_FASTQ_files:
    group:
        "FASTQ"
    input:
        unpack(get_fq_files)
    output:
        CellBarcode_fq = CB_FASTQ_FILE,
        cDNA_fq = cDNA_FASTQ_FILE,
    shell:
        "cp {input.CellBarcode_fq} {output.CellBarcode_fq} && "
        "cp {input.cDNA_fq} {output.cDNA_fq}"
