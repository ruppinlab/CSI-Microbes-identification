from os.path import join, basename
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")
##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
#validate(config, schema="schemas/config.schema.yaml")

# wildcard_constraints:
#     patient="SC0[0-3][0-9]",
#     sample="Sample[0-9][a-c]",

# patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# # validate(samples, schema="schemas/samples.schema.yaml")
#
# lanes = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample", "lane"], drop=False)
# lanes.index = lanes.index.set_levels([i.astype(str) for i in lanes.index.levels])  # enforce str in index
# samples = lanes[["sample", "patient"]].drop_duplicates()
# cells = pd.read_csv(config["units"], sep="\t").set_index(["sample", "barcode", "patient"], drop=False)

# Snakemake includes
include: "../RNA-snakemake-rules/rules/mouse-genome.smk"
include: "../RNA-snakemake-rules/rules/ERCC92.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-SS2-STARsolo.smk"

# Directories
FASTQ_DIR = "FASTQ"
PATIENT_FASTQ_DIR = join("FASTQ", "raw", "{patient}")
CR_SAMPLE_ODIR = "{patient}-{sample}"

# Input Files
SRA_FASTQ1_FILE = join(FASTQ_DIR, "{run}_1.fastq")
SRA_FASTQ2_FILE = join(FASTQ_DIR, "{run}_2.fastq")

VAL_FQ1_FILE = join(FASTQ_DIR, "validated", "{run}_1_val_1.fq")
VAL_FQ2_FILE = join(FASTQ_DIR, "validated", "{run}_2_val_2.fq")
BARCODE_FQ_FILE = join(FASTQ_DIR, "barcode", "{run}_AA.fq")
FQ1_WITH_BARCODE_FILE = join(FASTQ_DIR, "barcoded", "{run}_1.fq")
EXTRACTED_BARCODE_FQ = join(FASTQ_DIR, "extracted_barcodes", "{run}_extracted_barcodes.fq")
WHITELIST_BARCODES_FILE = join("output", "whitelist_barcodes", "{run}_whitelist_barcodes.txt")

# mouse files
GENCODE_MOUSE_GENOME_FASTA_FILE = join("raw", "genome", "GRCm38.primary_assembly.genome.fa")
GENCODE_MOUSE_GTF_FILE = join("raw", "genome", "gencode.vM25.annotation.gtf")

# STAR files
ENV_DIR = join("..", "RNA-snakemake-rules", "envs")
STAR_OUTPUT_DIR = join("output", "star", "{run}")
STAR_SE_OUTPUT_DIR = join(STAR_OUTPUT_DIR, "_STARse")
STAR_ENV_FILE = join(ENV_DIR, "star.yml")
STAR_GENOME_INDEX = join("output", "star-index")
STAR_SE_BAM_FILE = join(STAR_SE_OUTPUT_DIR, "Aligned.out.bam")
STAR_SE_READCOUNT_FILE = join(STAR_SE_OUTPUT_DIR, "ReadsPerGene.out.tab")
pathseq_bam = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.bam")
PATHSEQ_CELL_SCORE = join("output", "PathSeq", "{patient}-{sample}-{cell}", "pathseq.txt")

rule all:
    input:
        expand(pathseq_bam, patient="P0", sample="SRR13160581", plate="P0"),
        # expand(FQ1_WITH_BARCODE_FILE, run="SRR13160581"),

rule create_star_index:
    conda:
        STAR_ENV_FILE
    input:
        genome = config["ref"]["genome"],
        gtf = config["ref"]["annotation"],
    output:
        directory(STAR_GENOME_INDEX)
    threads:
        16
    shell:
        "mkdir '{output}' && STAR "
        "--runThreadN {threads} "
        "--runMode genomeGenerate "
        "--genomeDir '{output}' "
        "--genomeFastaFiles '{input[genome]}' "
        "--sjdbGTFfile '{input[gtf]}'"

# map reads using STAR
rule STAR_SE:
    conda:
        STAR_ENV_FILE
    params:
        odir = join(STAR_SE_OUTPUT_DIR, "")
    input:
        STAR_GENOME_INDEX,
        FQ1_WITH_BARCODE_FILE
    output:
        STAR_SE_BAM_FILE,
        STAR_SE_READCOUNT_FILE
    shell:
        "STAR "
        "--runThreadN 16 "
        "--readFilesIn {input[1]} "
        "--genomeDir {input[0]} "
        "--outSAMunmapped Within "
        "--outSAMtype BAM Unsorted "
        "--outSAMattrRGline ID:{wildcards.run} "
        "PL:illumina SM:{wildcards.run} LB:RNA "
        "--outFileNamePrefix '{params.odir}' "
        "--quantMode GeneCounts "

# this adds the cell barcode to the name of the fq read
rule umi_barcode:
    conda:
        "../envs/umi-tools-env.yaml"
    input:
        WHITELIST_BARCODES_FILE,
        VAL_FQ1_FILE,
        BARCODE_FQ_FILE
    output:
        FQ1_WITH_BARCODE_FILE,
        EXTRACTED_BARCODE_FQ
    shell:
        "umi_tools extract --bc-pattern=CCCCCCCCCCNNNNNNNN  --stdin {input[2]} --stdout {output[1]}  --read2-in {input[1]}  --read2-out={output[0]}  --filter-cell-barcode --whitelist={input[0]}"

# generate potential set of barcodes (the 110 barcodes that appear most frequently)
rule umi_whitelist:
    conda:
        "../envs/umi-tools-env.yaml"
    input:
        BARCODE_FQ_FILE
    output:
        WHITELIST_BARCODES_FILE
    shell:
        "umi_tools whitelist --stdin {input} --bc-pattern=CCCCCCCCCCNNNNNNNN --set-cell-number=110 --log2stderr > {output}"

# FQ2 contains the cell barcode (and UMI?)
# not sure what the sed command does
rule extract_barcode_from_FQ:
    input:
        VAL_FQ2_FILE
    output:
        BARCODE_FQ_FILE
    shell:
        "sed '2~2s/^/AA/g' {input} > {output}"

rule clean_FASTQ_files:
    conda:
        "../envs/trim_galore-env.yaml"
    input:
        SRA_FASTQ1_FILE,
        SRA_FASTQ2_FILE,
    params:
        odir = join("FASTQ", "validated")
    output:
        VAL_FQ1_FILE,
        VAL_FQ2_FILE
    shell:
        "trim_galore --paired -q 20 --fastqc -o {params.odir} {input[0]} {input[1]}"

### rules to download FASTQ files ###

# download files from SRA
# need to --include-technical to get the 10x UMI and CB reads
# this requires
rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    params:
        FASTQ_DIR
    output:
        SRA_FASTQ1_FILE,
        SRA_FASTQ2_FILE,
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.run}"
