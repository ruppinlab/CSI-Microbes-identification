from os.path import join, basename
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")
##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
#validate(config, schema="schemas/config.schema.yaml")

samples = pd.read_csv(config["samples"], sep="\t").set_index(["patient", "sample", "plate"], drop=False)
#samples = samples.iloc[0:2]
#print(samples)
#print(samples["sample"].unique())
Staph_barcodes_file = "FASTQ/raw/M0/whitelist_barcodes/Staph_BKDL202581088-1a_P0_whitelist_barcodes.txt"
Staph_barcodes = pd.read_csv(Staph_barcodes_file, sep="\t", header=None)[0].values
ctrl_barcodes_file = "FASTQ/raw/M0/whitelist_barcodes/Con_BKDL202581087-1a_P0_whitelist_barcodes.txt"
ctrl_barcodes = pd.read_csv(ctrl_barcodes_file, sep="\t", header=None)[0].values
Lac_barcodes_file = "FASTQ/raw/M0/whitelist_barcodes/Lac_BKDL202581091-1a_P0_whitelist_barcodes.txt"
Lac_barcodes = pd.read_csv(Lac_barcodes_file, sep="\t", header=None)[0].values
Ef_barcodes_file = "FASTQ/raw/M0/whitelist_barcodes/Ef_BKDL202581093-1a_P0_whitelist_barcodes.txt"
Ef_barcodes = pd.read_csv(Ef_barcodes_file, sep="\t", header=None)[0].values
Sc_barcodes_file = "FASTQ/raw/M0/whitelist_barcodes/Sc_BKDL202581089-1a_P0_whitelist_barcodes.txt"
Sc_barcodes = pd.read_csv(Sc_barcodes_file, sep="\t", header=None)[0].values
Sk_barcodes_file = "FASTQ/raw/M0/whitelist_barcodes/Sk_BKDL202581092-1a_P0_whitelist_barcodes.txt"
Sk_barcodes = pd.read_csv(Sk_barcodes_file, sep="\t", header=None)[0].values

wildcard_constraints:
    sample="|".join(samples["sample"].unique()),
    patient="M0",
    plate="P0"


# # validate(samples, schema="schemas/samples.schema.yaml")
#
# lanes = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample", "lane"], drop=False)
# lanes.index = lanes.index.set_levels([i.astype(str) for i in lanes.index.levels])  # enforce str in index
# samples = lanes[["sample", "patient"]].drop_duplicates()
# cells = pd.read_csv(config["units"], sep="\t").set_index(["sample", "barcode", "patient"], drop=False)

# Snakemake includes
include: "../RNA-snakemake-rules/rules/mouse-genome.smk"
include: "../RNA-snakemake-rules/rules/ERCC92.smk"
# include: "../pathogen-discovery-rules/rules/PathSeq-SS2-STARsolo.smk"

# Directories
FASTQ_DIR = "FASTQ"
PATIENT_FASTQ_DIR = join("FASTQ", "raw", "{patient}")

# Input Files
SRA_FASTQ1_FILE = join(FASTQ_DIR, "{run}_1.fastq")
SRA_FASTQ2_FILE = join(FASTQ_DIR, "{run}_2.fastq")

cDNA_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{plate}_R1.fq")
CB_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{plate}_R2.fq")

VAL_cDNA_FILE = join(PATIENT_FASTQ_DIR, "validated", "{sample}_{plate}_R1_val_1.fq")
VAL_CB_FILE = join(PATIENT_FASTQ_DIR, "validated", "{sample}_{plate}_R2_val_2.fq") # contains the barcodes
BARCODE_FQ_FILE = join(PATIENT_FASTQ_DIR, "barcode", "{sample}_{plate}_AA.fq")
cDNA_WITH_BARCODE_FILE = join(PATIENT_FASTQ_DIR, "barcoded", "{sample}_{plate}_1.fq")
EXTRACTED_BARCODE_FQ = join(PATIENT_FASTQ_DIR, "extracted_barcodes", "{sample}_{plate}_extracted_barcodes.fq")
WHITELIST_BARCODES_FILE = join(PATIENT_FASTQ_DIR, "whitelist_barcodes", "{sample}_{plate}_whitelist_barcodes.txt")

# mouse files
GENCODE_MOUSE_GENOME_FASTA_FILE = join("raw", "genome", "GRCm38.primary_assembly.genome.fa")
GENCODE_MOUSE_GTF_FILE = join("raw", "genome", "gencode.vM25.annotation.gtf")

# STAR files
ENV_DIR = join("..", "RNA-snakemake-rules", "envs")
STAR_OUTPUT_DIR = join("output", "star", "{patient}-{sample}-{plate}")
STAR_SE_OUTPUT_DIR = join(STAR_OUTPUT_DIR, "_STARse")
STAR_ENV_FILE = join(ENV_DIR, "star.yml")
STAR_GENOME_INDEX = join("output", "star-index")
STAR_SE_BAM_FILE = join(STAR_SE_OUTPUT_DIR, "Aligned.out.bam")
STAR_SE_READCOUNT_FILE = join(STAR_SE_OUTPUT_DIR, "ReadsPerGene.out.tab")
pathseq_bam = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.bam")
sorted_pathseq_bam = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.sorted.bam")
sorted_pathseq_bam_idx = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.sorted.bam.bai")
pathseq_cell_bam = join("output", "PathSeq", "{patient}-{sample}-{plate}-{cell}", "pathseq.bam")
PATHSEQ_CELL_SCORE = join("output", "PathSeq", "{patient}-{sample}-{plate}-{cell}", "pathseq.txt")

rule all:
    input:
        expand(join("output", "featureCounts", "{patient}-{sample}-{plate}", "gene_assigned"), patient="M0", sample="Staph_BKDL202581088-1a", plate="P0")
        # expand(SRA_FASTQ1_FILE, run=samples["Run"]),
        # expand(PATHSEQ_CELL_SCORE, patient="M0", sample="Staph_BKDL202581088-1a", plate="P0", cell=Staph_barcodes),
        # expand(PATHSEQ_CELL_SCORE, patient="M0", sample="Con_BKDL202581087-1a", plate="P0", cell=ctrl_barcodes),
        # expand(PATHSEQ_CELL_SCORE, patient="M0", sample="Lac_BKDL202581091-1a", plate="P0", cell=Lac_barcodes),
        # expand(PATHSEQ_CELL_SCORE, patient="M0", sample="Ef_BKDL202581093-1a", plate="P0", cell=Ef_barcodes),
        # expand(PATHSEQ_CELL_SCORE, patient="M0", sample="Sc_BKDL202581089-1a", plate="P0", cell=Sc_barcodes),
        # expand(PATHSEQ_CELL_SCORE, patient="M0", sample="Sk_BKDL202581092-1a", plate="P0", cell=Sk_barcodes),
# umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS --per-cell -I $sorted_file -S $result/06_umiCount/$id.counts.tsv.gz --wide-format-cell-counts
# next step, need to add cell-barcodes to pathseq bam and then split
# where are the cell-barcodes in the bam files?



rule PathSeqScoreSpark:
    group:
        "PathSeqScoreSpark"
    input:
        bam_file = pathseq_cell_bam,
        taxonomy_db = config["PathSeq"]["taxonomy_db"]
    output:
        pathseq_output = PATHSEQ_CELL_SCORE
    run:
        n_alignments = int(next(shell("module load samtools/1.11 && samtools view {input[bam_file]} | wc -l", iterable=True)))
        if n_alignments == 0:
            cols = ["tax_id", "taxonomy", "type", "name", "kingdom", "score", "score_normalized", "reads", "unambiguous", "reference_length"]
            pd.DataFrame(columns=cols).to_csv(output.pathseq_output, sep="\t", index=False)
        else:
            shell(
                "module load GATK/4.1.8.1 && "
                "gatk PathSeqScoreSpark "
                "--min-score-identity .7 "
                "--unpaired-input '{input.bam_file}' "
                "--taxonomy-file {input.taxonomy_db} "
                "--scores-output '{output.pathseq_output}' "
                '--java-options "-Xmx5g -Xms5G -XX:+UseG1GC -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2" '
                "--conf spark.port.maxRetries=128 "
                '--spark-master local[2] ' + config["params"]["PathSeqScore"]
            )

rule split_pathseq_bam_Ef:
    wildcard_constraints:
        sample="Ef_BKDL202581093-1a"
    conda:
        "../envs/pysam-env.yaml"
    group:
        "split_pathseq_bam"
    input:
        sorted_pathseq_bam,
        sorted_pathseq_bam_idx,
        Ef_barcodes_file
    output:
        expand(pathseq_cell_bam, patient="{patient}", sample="{sample}", plate="{plate}", cell=Ef_barcodes)
    script:
        "src/split_bam_by_cell_barcode.py"

rule split_pathseq_bam_Sk:
    wildcard_constraints:
        sample="Sk_BKDL202581092-1a"
    conda:
        "../envs/pysam-env.yaml"
    group:
        "split_pathseq_bam"
    input:
        sorted_pathseq_bam,
        sorted_pathseq_bam_idx,
        Sk_barcodes_file
    output:
        expand(pathseq_cell_bam, patient="{patient}", sample="{sample}", plate="{plate}", cell=Sk_barcodes)
    script:
        "src/split_bam_by_cell_barcode.py"

rule split_pathseq_bam_Sc:
    wildcard_constraints:
        sample="Sc_BKDL202581089-1a"
    conda:
        "../envs/pysam-env.yaml"
    group:
        "split_pathseq_bam"
    input:
        sorted_pathseq_bam,
        sorted_pathseq_bam_idx,
        Sc_barcodes_file
    output:
        expand(pathseq_cell_bam, patient="{patient}", sample="{sample}", plate="{plate}", cell=Sc_barcodes)
    script:
        "src/split_bam_by_cell_barcode.py"

rule split_pathseq_bam_Staph:
    conda:
        "../envs/pysam-env.yaml"
    group:
        "split_pathseq_bam"
    wildcard_constraints:
        sample="Staph_BKDL202581088-1a"
    input:
        sorted_pathseq_bam,
        sorted_pathseq_bam_idx,
        Staph_barcodes_file
    output:
        expand(pathseq_cell_bam, patient="{patient}", sample="{sample}", plate="{plate}", cell=Staph_barcodes)
    script:
        "src/split_bam_by_cell_barcode.py"

rule split_pathseq_bam_ctrl:
    conda:
        "../envs/pysam-env.yaml"
    group:
        "split_pathseq_bam"
    wildcard_constraints:
        sample="Con_BKDL202581087-1a"
    input:
        sorted_pathseq_bam,
        sorted_pathseq_bam_idx,
        ctrl_barcodes_file
    output:
        expand(pathseq_cell_bam, patient="{patient}", sample="{sample}", plate="{plate}", cell=ctrl_barcodes)
    script:
        "src/split_bam_by_cell_barcode.py"

rule split_pathseq_bam_Lac:
    conda:
        "../envs/pysam-env.yaml"
    group:
        "split_pathseq_bam"
    wildcard_constraints:
        sample="Lac_BKDL202581091-1a"
    input:
        sorted_pathseq_bam,
        sorted_pathseq_bam_idx,
        Lac_barcodes_file
    output:
        expand(pathseq_cell_bam, patient="{patient}", sample="{sample}", plate="{plate}", cell=Lac_barcodes)
    script:
        "src/split_bam_by_cell_barcode.py"

rule index_pathseq_bam:
    input:
        sorted_pathseq_bam
    output:
        sorted_pathseq_bam_idx
    shell:
        "module load samtools && "
        "samtools index {input}"

rule sort_pathseq_bam:
    input:
        pathseq_bam
    output:
        sorted_pathseq_bam
    shell:
        "module load samtools && "
        "samtools sort -o {output} {input}"

rule create_star_index:
    conda:
        STAR_ENV_FILE
    input:
        genome = config["ref"]["genome"],
        gtf = config["ref"]["annotation"],
    output:
        directory(STAR_GENOME_INDEX)
    threads:
        16
    shell:
        "mkdir '{output}' && STAR "
        "--runThreadN {threads} "
        "--runMode genomeGenerate "
        "--genomeDir '{output}' "
        "--genomeFastaFiles '{input[genome]}' "
        "--sjdbGTFfile '{input[gtf]}'"

rule run_featurecount:
    conda:
        "envs/subread.yml"
    input:
        gtf = config["ref"]["annotation"],
        bam = STAR_SE_BAM_FILE
    output:
        join("output", "featureCounts", "{patient}-{sample}-{plate}", "gene_assigned")
    shell:
        "featureCounts -a {input.gtf} -o {output} -R BAM {input.bam}"
        # output is $result/05_featureCount/$id.Aligned.sortedByCoord.out.bam.featureCounts.bam
        # input file should actually be .../Aligned.out.bam



# map reads using STAR
rule STAR_SE:
    conda:
        STAR_ENV_FILE
    params:
        odir = join(STAR_SE_OUTPUT_DIR, "")
    input:
        STAR_GENOME_INDEX,
        cDNA_WITH_BARCODE_FILE
    output:
        STAR_SE_BAM_FILE,
        STAR_SE_READCOUNT_FILE
    shell:
        "STAR "
        "--runThreadN 16 "
        "--readFilesIn {input[1]} "
        "--genomeDir {input[0]} "
        "--outSAMunmapped Within "
        "--outSAMtype BAM Unsorted "
        "--outSAMattrRGline ID:{wildcards.sample} "
        "PL:illumina SM:{wildcards.sample} LB:RNA "
        "--outFileNamePrefix '{params.odir}' "
        "--quantMode GeneCounts "

# this adds the cell barcode to the name of the fq read
rule umi_barcode:
    conda:
        "../envs/umi-tools-env.yaml"
    input:
        WHITELIST_BARCODES_FILE,
        VAL_cDNA_FILE,
        BARCODE_FQ_FILE
    output:
        cDNA_WITH_BARCODE_FILE,
        EXTRACTED_BARCODE_FQ
    shell:
        "umi_tools extract --bc-pattern=CCCCCCCCCCNNNNNNNN  --stdin {input[2]} --stdout {output[1]}  --read2-in {input[1]}  --read2-out={output[0]}  --filter-cell-barcode --whitelist={input[0]}"

# generate potential set of barcodes (the 110 barcodes that appear most frequently)
rule umi_whitelist:
    conda:
        "../envs/umi-tools-env.yaml"
    input:
        BARCODE_FQ_FILE
    output:
        WHITELIST_BARCODES_FILE
    shell:
        "umi_tools whitelist --stdin {input} --bc-pattern=CCCCCCCCCCNNNNNNNN --set-cell-number=110 --log2stderr > {output}"

# FQ2 contains the cell barcode (and UMI?)
# not sure what the sed command does
rule extract_barcode_from_FQ:
    input:
        VAL_CB_FILE
    output:
        BARCODE_FQ_FILE
    shell:
        "sed '2~2s/^/AA/g' {input} > {output}"

rule clean_FASTQ_files:
    conda:
        "../envs/trim_galore-env.yaml"
    input:
        cDNA_FASTQ_FILE,
        CB_FASTQ_FILE,
    params:
        odir = join("FASTQ", "raw", "{patient}", "validated")
    output:
        VAL_cDNA_FILE,
        VAL_CB_FILE
    shell:
        "trim_galore --paired -q 20 --fastqc -o {params.odir} {input[0]} {input[1]}"

### rules to download FASTQ files ###

# cell barcode FQ file is FQ2
def get_sra_fq_files(wildcards):
    run_of_interest = samples.at[(wildcards.patient, wildcards.sample, wildcards.plate), "Run"]
    return {
        "cDNA_fq": expand(SRA_FASTQ1_FILE, run=run_of_interest),
        "CellBarcode_fq": expand(SRA_FASTQ2_FILE, run=run_of_interest),
    }

# compress and rename
rule rename_SRA_FASTQ_files:
    group:
        "FASTQ"
    input:
        unpack(get_sra_fq_files)
    output:
        CellBarcode_fq = CB_FASTQ_FILE,
        cDNA_fq = cDNA_FASTQ_FILE,
    shell:
        "cp {input.CellBarcode_fq} {output.CellBarcode_fq} && "
        "cp {input.cDNA_fq} {output.cDNA_fq}"

# download files from SRA
# need to --include-technical to get the 10x UMI and CB reads
# this requires
rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    params:
        FASTQ_DIR
    output:
        SRA_FASTQ1_FILE,
        SRA_FASTQ2_FILE,
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.run}"
