from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

##### load config and sample sheets #####
configfile: "config/PathSeq-config.yaml"


# metadata
#patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
#samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
cells = pd.read_csv(config["units"], dtype=str, sep="\t").set_index(["patient", "sample", "cell"], drop=False)

wildcard_constraints:
    patient="|".join(cells["patient"].unique()),
    sample="|".join(cells["sample"].unique()),
    plate="|".join(cells["plate"].unique()),
    cell="|".join(cells["cell"].unique())

# include rules
include: "../RNA-snakemake-rules/rules/ERCC92.smk"
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
include: "../RNA-snakemake-rules/rules/STARsolo_SmartSeq.smk"
include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-SS2-STARsolo.smk"

# directories
FASTQ_DIR = join("FASTQ")
RAW_FASTQ_DIR = join(FASTQ_DIR, "raw")

# Intermediate Files for STARsolo
SRA_FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{run}_1.fastq")
SRA_FASTQ2_FILE = join(RAW_FASTQ_DIR, "{run}_2.fastq")
FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}-{cell}_1.fastq.gz")
FASTQ2_FILE = join(RAW_FASTQ_DIR, "{patient}-{sample}-{cell}_2.fastq.gz")

# PathSeq Output Files
PathSeq_BAM_File = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.bam")
PathSeq_Cell_Score_File = join("output", "PathSeq", "{patient}-{sample}-{plate}-{cell}", "pathseq.txt")

plates = cells[["patient", "sample", "plate"]].drop_duplicates()
top_cells = cells.iloc[0:2]

rule all:
    input:
        expand(STAR_PE_BAM_FILE, patient="P1", sample="S1", plate="P1"),
        # expand(FASTQ1_FILE, zip, patient=top_cells["patient"], sample=top_cells["sample"], plate=top_cells["plate"], cell=top_cells["cell"]),


def get_SRA_fq_files(wildcards):
    run = cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "Run"]
    return {
        "FQ1": SRA_FASTQ1_FILE.format(run=run),
        "FQ2": SRA_FASTQ2_FILE.format(run=run),
    }

rule compress_FASTQ_File:
    group:
        "FASTQ"
    input:
        unpack(get_SRA_fq_files)
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    shell:
        "ml pigz/2.7-GCCcore-11.3.0 && "
        "pigz -p 4 -c {input[FQ1]} > {output[0]} && "
        "pigz -p 4 -c {input[FQ2]} > {output[1]}"

rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    conda:
        "../envs/sratoolkit-env.yaml"
    params:
        RAW_FASTQ_DIR
    output:
        SRA_FASTQ1_FILE,
        SRA_FASTQ2_FILE
    shell:
        "fasterq-dump -O {params} "
        "--split-files {wildcards.run}"

