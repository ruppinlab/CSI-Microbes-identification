from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
cells = pd.read_csv(config["units"], dtype=str, sep="\t").set_index(["patient", "sample", "cell"], drop=False)
#samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index
plates_of_interest = [
    "B003648", "B003659", "1001000327", "1001000339", "1001000340", "B003518",
    "B003522", "B003527", "B003529", "B003588", "B003523", "B003528", "B003577",
    "B001543", "B001545", "B001548", "1001000411", "B000860", "B000861",
    "B000862", "B000863", "B000579", "B003654", "B003125", "B003126", "B003129",
    "B003132", "B003187", "B003191", "B003647", "B003112", "B003116", "B003119",
    "B003120", "B003771", "B003894", "B003920", "B003995", "B000420", "B000422",
    "B002077", "B002078", "B002079", "B003775", "B003776", "B003777", "B001470",
    "B001474", "B001475", "B001464"
]
# TH067 - B003648 and B003659
# TH169 - 1001000339, 1001000340
# TH171 - B003518, B003522, B003527, B003529, B003588

# plates_of_interest = [
#     "B003648", "B003659",
#     "1001000339", "1001000340",
#     "B003518", "B003522", "B003527", "B003529", "B003588"
# ]

# plates_of_interest = ["B003648", "B003659"]

cells = cells.loc[cells.plate.isin(plates_of_interest)]
samples = cells[["patient", "sample", "plate"]].drop_duplicates()

wildcard_constraints:
    patient="|".join(cells["patient"].unique()),
    sample="|".join(cells["sample"].unique()),
    plate="|".join(cells["plate"].unique()),
    cell="|".join(cells["cell"].unique()),

# directories
FASTQ_DIR = "FASTQ"
RAW_FASTQ_DIR = join(FASTQ_DIR, "raw")

# Intermediate Files
SRA_FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{run}_1.fastq")
SRA_FASTQ2_FILE = join(RAW_FASTQ_DIR, "{run}_2.fastq")
FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}-{cell}_1.fastq.gz")
FASTQ2_FILE = join(RAW_FASTQ_DIR, "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_FASTQ1_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_1.fastq.gz")
TRIMMED_FASTQ2_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_UNPAIRED_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_3.fastq.gz")


PATHSEQ_BAM_FILE = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.bam")
PATHSEQ_CELL_SCORE_FILE = join("output", "PathSeq", "{patient}-{sample}-{plate}-{cell}", "pathseq.txt")

# include rules
include: "../RNA-snakemake-rules/rules/ERCC92.smk"
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
include: "../RNA-snakemake-rules/rules/STARsolo_SmartSeq.smk"
include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-SS2-STARsolo.smk"


rule all:
    input:
        expand(PATHSEQ_CELL_SCORE_FILE, zip, sample=cells["sample"], patient=cells["patient"], plate=cells["plate"], cell=cells["cell"]),


def get_SRA_fq_files(wildcards):
    run = cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "Run"]
    return {
        "FQ1": SRA_FASTQ1_FILE.format(run=run),
        "FQ2": SRA_FASTQ2_FILE.format(run=run),
    }

rule compress_FASTQ_File:
    group:
        "FASTQ"
    input:
        unpack(get_SRA_fq_files)
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    benchmark:
        "benchmark/{patient}-{sample}-{cell}-compress_FASTQ_File.txt"
    shell:
        "gzip -vc {input[FQ1]} > {output[0]} && "
        "gzip -vc {input[FQ2]} > {output[1]}"

rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    params:
        RAW_FASTQ_DIR,
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    benchmark:
        "benchmark/{run}-download_FASTQ_from_SRA.txt"
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.run}"
